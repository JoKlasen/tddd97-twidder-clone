1.  We validate data before so we don't send unnecessary requests which will not
    only load the server when we don't need to but also we as users will
    experience a delay of the validation because sending over network can take
    some time.

2.  The system is more secure than if you would enter your password and email
    everytime since there is no risk that anyone is eavesdropping and getting
    your password. The token is somewhat temporary and therefore less of a risk
    to loose. Still it's very bad if someone gets your token. We can't figure
    out a way to circumvent this system except if you would intervene with the
    network traffic and catch a token sent over http. If the network traffic is
    encrypted, this risk is low.

3.  When we post a script tag with alert(1337) inside it isn't executed and we
    are not sure why, because if we do a img element with onerror=alert it
    works. The counter measures are e.g., to not allow all html elements to be
    posted (if any) and to sanitize the input from the user to detect malicious
    code.

    It would be possible to access variables and information stored on the
    server side. Also e.g., if I post a script to another persons wall
    containing code to send everything in the persons localstorage/cookies to me
    I get access to personal information. 

4.  You can't really use the back/forward buttons since the page is a SPA.
    Only a single hmtl page is loaded from the server, and the content is
    altered as you interact with it. The browser has no way of keeping track how
    this changes would relate to going backwards or forward, so this is expected
    behaviour for a SPA. You could manually program functionally to tell the
    browser what kind of user input equals the page history to go back or
    forward through. 


5.  Just as above this is expected behaviour for a SPA. Again, only a single page
    is loaded and the contents get altered in the DOM when the user interacts
    with the site. If you refresh the page, you reload the page from the server
    and have to start the interactions all over, unless you add functionality in
    the codes page to keep track of different interactions and states.

6.  It could be a good idea since the initial download for the user would be
    quicker because the browser doesn't have to download all the content at
    once. On the other hand the overall experience might be a bit more laggy
    since downloads are needed to be done continuosly. In the case of this
    website, downloading all html at once is not problem since it is not a very
    large website.

7.  It might not be obvious what has gone wrong so by sending more information,
    e.g., error codes, it would be easier to understand the fault on client
    side.

8.  They are a good idea, but should not be considered reliable since they can
    be circumvented. Doing it client side helps reduce unnecessary traffic to
    the server, but the validation should always be done server-side to be more
    secure.

9.  Using tables for layout purposes will limit they way you can style the
    website pretty much, and also the website would not function as expected
    from the developer perspective. As replacement e.g., flexbox or grid could
    be used. We are using flexbox.

10. Because much content is downloaded the first time the user browses to the
    website, there will be an initial heavy load, but after this download has
    been done, the experience can be considered more smooth than if much html
    was continously downloaded, and thus SPA contribute to smoother user
    experience for users.

    For developers it may be considered easier to develop a SPA since you don't
    have to do a lot of complex routing between urls and thus contributing to
    the future.